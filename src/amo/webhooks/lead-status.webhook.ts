import { Injectable } from "@nestjs/common";
import { AbstractWebhook } from "./abstract.webhook";
import { LeadHelper } from "../helpers/lead.helper";
import { AMO } from "../amo.constants";

@Injectable()
export class LeadStatusWebhook extends AbstractWebhook {
  async handle(data: unknown) {
    const lead = await LeadHelper.createFromWebhook(this.amo, data, {
      load_goods: true,
      load_contact: true,
    });

    switch (lead.data.status_id) {
      case AMO.STATUS.REQUISITE: {
        await this.statusRequisite(lead);
        break;
      }
      case AMO.STATUS.PAYMENT: {
        await this.statusPayment(lead);
        break;
      }
      case AMO.STATUS.DELIVERY: {
        await this.statusDelivery(lead);
        break;
      }
      case AMO.STATUS.POST: {
        await this.statusPost(lead);
        break;
      }
    }

    await lead.saveToAmo();
  }

  private async statusRequisite(lead: LeadHelper) {
    this.validation(lead, [
      "delivery_type_exists",
      "delivery_type_cdek_or_post",
      "email_exists",
      "phone_exists",
      "name_exists",
      "goods_exists",
      "order_number_exists",
      "index_exists",
      "city_exists",
      "street_exists",
      "building_exists",
      "flat_exists",
      "prepay_exists",
    ]);

    if (lead.errors.length > 0 || lead.warnings.length > 0) {
      lead.note(["üîç –°—Ç–∞—Ç—É—Å: –†–µ–∫–≤–∏–∑–∏—Ç—ã", ...lead.errors, ...lead.warnings].join("\n"));
    }
    if (lead.errors.length > 0) return;

    let prepay = lead.custom_fields.get(AMO.CUSTOM_FIELD.PREPAY)
      ? Number(lead.custom_fields.get(AMO.CUSTOM_FIELD.PREPAY))
      : 0;
    if (isNaN(prepay)) prepay = 0;

    try {
      await this.mail.invoice({
        name: lead.contact.name,
        address: lead.getFullAddress(true),
        phone: lead.contact.custom_fields.get(AMO.CONTACT.PHONE),
        email: lead.contact.custom_fields.get(AMO.CONTACT.EMAIL),
        delivery_type: lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_TYPE) as string,
        order_number: lead.custom_fields.get(AMO.CUSTOM_FIELD.ORDER_ID) as string,
        goods: [...lead.goods.values()].map((good) => ({
          name: good.name,
          quantity: good.quantity,
          price: good.price,
        })),
        total_price: lead.data.price,
        discount: lead.custom_fields.get(AMO.CUSTOM_FIELD.DISCOUNT) as string,
        prepayment: prepay,
      });

      lead.note("‚úÖ email: –ø–∏—Å—å–º–æ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    } catch (err) {
      this.logger.error(err);
      lead.note("‚ùå email: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏");
    }
  }

  private async statusPayment(lead: LeadHelper) {
    this.validation(lead, ["email_exists", "order_number_exists"]);

    if (lead.errors.length > 0) {
      lead.note(["üîç –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—Ç–∞", ...lead.errors].join("\n"));
      return;
    }

    try {
      await this.mail.prepaymentConfirm({
        email: lead.contact.custom_fields.get(AMO.CONTACT.EMAIL),
        order_number: lead.custom_fields.get(AMO.CUSTOM_FIELD.ORDER_ID) as string,
      });

      lead.note("‚úÖ email: –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    } catch (err) {
      this.logger.error(err);
      lead.note("‚ùå email: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã");
    }
  }

  private async statusDelivery(lead: LeadHelper) {
    this.validation(lead, [
      "delivery_type_exists",
      "delivery_type_courier",
      "phone_exists",
      "goods_exists",
      "order_number_exists",
      "city_exists",
      "street_exists",
      "building_exists",
      "flat_exists",
      "prepay_exists",
      "delivery_time_exists",
      "discount_is_percent",
    ]);

    if (lead.errors.length > 0 || lead.warnings.length > 0) {
      lead.note(["üîç –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–∫–∞", ...lead.errors, ...lead.warnings].join("\n"));
    }
    if (lead.errors.length > 0) return;

    let discount = Number(
      ((lead.custom_fields.get(AMO.CUSTOM_FIELD.DISCOUNT) as string) ?? "").replaceAll("%", ""),
    );
    discount = isNaN(discount) ? 1 : discount > 100 ? 1 : (100 - discount) / 100;
    const delivery_cost = Number(lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_COST) as string);

    try {
      const pdf = await this.pdf.invoice({
        order_id: lead.custom_fields.get(AMO.CUSTOM_FIELD.ORDER_ID) as string,
        customer_name: lead.contact.name,
        customer_phone: lead.contact.custom_fields.get(AMO.CONTACT.PHONE),
        customer_address: lead.getFullAddress(),
        delivery_time: lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_TIME) as string,
        payment_type: lead.custom_fields.get(AMO.CUSTOM_FIELD.PAY_TYPE) as string,
        goods: [...lead.goods.values()].map((good) => ({
          name: good.name,
          price: Math.round(good.price * discount),
          quantity: good.quantity,
        })),
        delivery_cost: isNaN(delivery_cost) ? undefined : delivery_cost,
      });

      const yadisk_url = await this.yadisk.upload(
        `–¢–æ–≤–∞—Ä–Ω—ã–π_—á–µ–∫_${lead.custom_fields.get(AMO.CUSTOM_FIELD.ORDER_ID)}.pdf`,
        Buffer.from(pdf),
      );

      lead.note(`‚úé –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä–Ω—ã–π —á–µ–∫: ${yadisk_url}`);
    } catch (err) {
      this.logger.error(err);
      lead.note("‚ùå –¢–æ–≤–∞—Ä–Ω—ã–π —á–µ–∫: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏");
    }
  }

  private async statusPost(lead: LeadHelper) {
    this.validation(lead, [
      "delivery_type_exists",
      "delivery_type_cdek_or_post",
      "name_exists",
      "index_is_number",
      "city_exists",
      "street_exists",
      "building_exists",
      "flat_exists",
    ]);

    if (lead.errors.length > 0 || lead.warnings.length > 0) {
      lead.note(["üîç –°—Ç–∞—Ç—É—Å: –ü–æ—á—Ç–∞", ...lead.errors, ...lead.warnings].join("\n"));
    }
    if (lead.errors.length > 0) return;

    const phone = Number(lead.getStripedPhone());

    try {
      const pdf = await this.pdf.post7p112ep({
        recipient: lead.contact.name,
        recipient_address: lead.getFullAddress(),
        recipient_index: Number(lead.custom_fields.get(AMO.CUSTOM_FIELD.INDEX)),
        recipient_phone: isNaN(phone) ? undefined : phone,
        sum: lead.data.price,
        sum_cash_on_delivery:
          lead.data.price -
          lead.getAbsoluteDiscount() +
          Number((lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_COST) as string) ?? "0") -
          Number((lead.custom_fields.get(AMO.CUSTOM_FIELD.PREPAY) as string) ?? "0"),
      });

      const yadisk_url = await this.yadisk.upload(
        `–ü–æ—á—Ç–æ–≤—ã–π_–±–ª–∞–Ω–∫_${lead.custom_fields.get(AMO.CUSTOM_FIELD.ORDER_ID)}.pdf`,
        Buffer.from(pdf),
      );

      lead.note(`‚úé –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ—á—Ç–æ–≤—ã–π –±–ª–∞–Ω–∫: ${yadisk_url}`);
    } catch (err) {
      this.logger.error(err);
      lead.note("‚ùå –ü–æ—á—Ç–æ–≤—ã–π –±–ª–∞–Ω–∫: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏");
    }
  }

  private validation(lead: LeadHelper, fields: string[]) {
    const errors_check: Record<string, [boolean, string]> = {
      delivery_type_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_TYPE) ? true : false,
        "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏",
      ],
      delivery_type_cdek_or_post: [
        ["–≠–∫—Å–ø—Ä–µ—Å—Å –ø–æ –†–æ—Å—Å–∏–∏", "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"].includes(
          lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_TYPE) as string,
        ),
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏",
      ],
      delivery_type_courier: [
        ["–ö—É—Ä—å–µ—Ä–æ–º (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î)", "–ö—É—Ä—å–µ—Ä–æ–º (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)"].includes(
          lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_TYPE) as string,
        ),
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏",
      ],
      email_exists: [
        lead.contact.custom_fields.get(AMO.CONTACT.EMAIL) ? true : false,
        "‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω email",
      ],
      phone_exists: [
        lead.contact.custom_fields.get(AMO.CONTACT.PHONE) ? true : false,
        "‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω",
      ],
      order_number_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.ORDER_ID) ? true : false,
        "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
      ],
      goods_exists: [lead.goods.size > 0 ? true : false, "‚ùå –í —Å–¥–µ–ª–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"],
      name_exists: [lead.contact.name && lead.contact.name !== "", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –§–ò–û"],
      index_is_number: [
        Number(lead.custom_fields.get(AMO.CUSTOM_FIELD.INDEX)) ? true : false,
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å",
      ],
    };

    const warnings_check: Record<string, [boolean, string]> = {
      index_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.INDEX) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å",
      ],
      city_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.CITY) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥",
      ],
      street_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.STREET) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —É–ª–∏—Ü–∞",
      ],
      building_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.BUILDING) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –¥–æ–º",
      ],
      flat_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.FLAT) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞",
      ],
      delivery_cost_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_COST) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏",
      ],
      prepay_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.PREPAY) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞",
      ],
      delivery_time_exists: [
        lead.custom_fields.get(AMO.CUSTOM_FIELD.DELIVERY_TIME) ? true : false,
        "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
      ],
      discount_is_percent: [
        (lead.custom_fields.get(AMO.CUSTOM_FIELD.DISCOUNT) as string)?.includes("%") ||
          !lead.custom_fields.get(AMO.CUSTOM_FIELD.DISCOUNT),
        "‚ö†Ô∏è C–∫–∏–¥–∫–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö",
      ],
    };

    for (const [key, value] of Object.entries(errors_check)) {
      if (fields.includes(key) && !value[0]) {
        lead.error(value[1]);
      }
    }

    for (const [key, value] of Object.entries(warnings_check)) {
      if (fields.includes(key) && !value[0]) {
        lead.warning(value[1]);
      }
    }
  }
}
